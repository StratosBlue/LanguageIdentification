// <Auto-Generated></Auto-Generated>
using System.IO;
using System.Text;
#pragma warning disable CS8618 // 在退出构造函数时，不可为 null 的字段必须包含非 null 值。请考虑声明为可以为 null。
#pragma warning disable CS8601 // 引用类型赋值可能为 null。
#pragma warning disable CS8619 // 值中的引用类型的为 Null 性与目标类型不匹配。

namespace LanguageIdentification;

/**
 * Data model for {@link LangIdV3}.
 * 
 * @see #defaultModel()
 */
public sealed class Model
{
    /**
     * Language classes.
     */
    public string[] langClasses;

    /**
     * Flattened matrix of per-language feature probabilities.
     * <pre>
     * [featureIndex][langIndex]
     * where 
     * index = {@link #numClasses} * langIndex + featureIndex
     * </pre>
     */
    public float[] nb_ptc;

    /**
     * Conditional init per-language probabilities (?).
     */
    public float[] nb_pc;

    /**
     * State machine for walking byte n-grams. 
     */
    public short[] dsa;

    /**
     * An output (may be null) associated with each state.
     */
    public int[][] dsaOutput;

    #region Serialize

    public void Serialize(Stream stream)
    {
        using var writer = new BinaryWriter(stream, Encoding.UTF8, true);
        writer.WriteStringArray(langClasses);
        writer.WriteFloatArray(nb_ptc);
        writer.WriteFloatArray(nb_pc);
        writer.WriteInt16Array(dsa);

        if (writer.WriteArrayLength(dsaOutput))
        {
            foreach (var item in dsaOutput)
            {
                writer.WriteInt32Array(item);
            }
        }
    }

    public static Model Deserialize(Stream stream)
    {
        using var reader = new BinaryReader(stream, Encoding.UTF8, true);
        var langClasses = reader.ReadStringArray();
        var nb_ptc = reader.ReadFloatArray();
        var nb_pc = reader.ReadFloatArray();
        var dsa = reader.ReadInt16Array();

        int[]?[]? dsaOutput = null;
        if (reader.ReadArrayLength<int[]>(out var array) is int length
            && length > 0)
        {
            dsaOutput = new int[length][];
            for (int i = 0; i < length; i++)
            {
                dsaOutput[i] = reader.ReadInt32Array();
            }
        }
        else
        {
            dsaOutput = array;
        }

        return new Model()
        {
            langClasses = langClasses,
            nb_ptc = nb_ptc,
            nb_pc = nb_pc,
            dsa = dsa,
            dsaOutput = dsaOutput
        };
    }

    #endregion
}